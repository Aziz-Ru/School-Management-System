generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// env("DATABASE_URL")
model School {
  id          String @id @unique
  name        String
  email       String @unique
  phone       String @unique
  address     String @db.LongText
  establishAt String
}

model Teachers {
  id            String              @id @default(uuid()) //Teacher ID
  email         String
  name          String // Teacher name
  password      String // Teacher Password
  imageLink     String?
  qualification String? //Teacher Qualification
  rank          String
  bio           String? //Teacher Bio
  dob           String
  sex           String //Teacher date of birth
  address       String? // Teacher Address
  phone         String              @db.VarChar(11)
  activeStatus  Boolean
  salary        Float               @default(20000.0)
  attendence    TeacherAttendence[]
  enrollCourse  EnrollCourses[]
  createdAt DateTime @default(now())
}

model Students {
  id            String              @id @default(uuid())
  roll          String              @unique
  name          String
  email         String              @unique
  password      String
  dob           String
  sex           String
  address       String
  imageLink     String
  phone         String              @unique @db.Char(11) 
  enrollClass   EnrollClasses       @relation(fields: [enrollClassId], references: [id])
  enrollClassId String
  result        Results[] 
  attendence    StudentAttendence[]
  createdAt     DateTime            @default(now())
  @@unique([phone,email])
}

// first create class

model Classes {
  classId       Int          @id
  name          String          @unique
  courses       Courses[]
  enrolledClass EnrollClasses[]
  monthlyFee    Float           @default(2000.0)
  totalStudents Int             @default(0)
  totalTeachers Int             @default(0)
  totalCourses  Int             @default(0)
  year          String          @default("2021")
  createdAt     DateTime        @default(now())
}

model EnrollClasses {
  id          String     @id @default(uuid())
  students    Students[]
  class   Classes    @relation(fields: [classId], references: [classId])
  classId Int
  year        String
  createdAt   DateTime   @default(now())
  @@unique([classId,year])
}

model Courses {
  id          String    @id
  name        String
  credit      Int       @default(3)
  totalMarks  Int       @default(100)
  class       Classes   @relation(fields: [classId], references: [classId])
  classId Int
  enrollCourse EnrollCourses[]
  createdAt DateTime @default(now())
}

model EnrollCourses {
  id        String   @id @default(uuid())
  courses   Courses  @relation(fields: [courseId], references: [id])  
  courseId  String
  teacher   Teachers @relation(fields: [teacherId], references: [id])
  teacherId String
  exams    Exams[]
  results  Results[]
  createdAt DateTime @default(now())
}

enum ExamType {
  MidTerm
  Final
  Quiz
  Assignment
}


model Exams {
  id          String    @id @default(uuid())
  description String    @db.Text
  date        String
  course      EnrollCourses   @relation(fields: [courseId], references: [id])
  courseId    String
  result      Results[]
  type        ExamType @default(Final)
}



model Results {
  id        String   @id @default(uuid())
  exam      Exams    @relation(fields: [examId], references: [id])
  examId    String
  course    EnrollCourses  @relation(fields: [courseId], references: [id])
  courseId  String
  student   Students @relation(fields: [studentId], references: [id])
  studentId String
  marks     Float    @default(33.0)
  grade     String ? @default("A+") // A+ A- B+ B- C+ C- D+ D- F
  createdAt DateTime @default(now())

}



model StudentAttendence {
  id        String   @id @default(uuid())
  student   Students @relation(fields: [studentId], references: [id])
  studentId String
  status    Boolean  @default(false)
  date      String
}

model TeacherAttendence {
  id        String   @id @default(uuid())
  teacher   Teachers @relation(fields: [teacherId], references: [id])
  teacherId String
  status    Boolean  @default(false)
  date      String
}


model Issues {
  id      String @id @default(uuid())
  type    String
  details String @db.LongText
  createdAt DateTime @default(now())
}

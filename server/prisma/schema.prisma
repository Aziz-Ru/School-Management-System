generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// env("DATABASE_URL")
model School {
  id            Int    @id @unique
  name          String
  email         String @unique
  phone         String @unique
  totalTeachers Int    @default(30)
  address       String @db.LongText
  
}

enum Role {
  Admin
  Teacher
  Student
}

enum Rank {
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STAFF
}

model User {
  id            String         @id @default(uuid())
  uId        String         @unique
  name          String
  email         String         @unique
  password      String
  admissionYear String
  role          Role           @default(Student)
  profile       Profile?
  enrollCourse  EnrollCourse[]
  class         EnrollClass[]
  results       Result[]
  attendence    Attendence[]
  createdAt     DateTime       @default(now())

  @@unique([uId, name])
  @@map("users")
}


model Profile {
  id             String          @id @default(uuid())
  uId            String          @unique
  dob            String
  address        String?
  sex            String
  imageLink      String?
  phone          String          
  user           User            @relation(fields: [uId], references: [uId], onDelete: Cascade)
  createdAt      DateTime        @default(now())
}




model Class {
  classId         String        @id
  monthlyFee      Float         @default(1000.0)
  totalStudents   Int
  totalCourses    Int
  maxStudents Int           @default(100)
  maxCourses  Int           @default(10)
  courses         Courses[]
  enrolledClass   EnrollClass[]
  createdAt       DateTime      @default(now())

  @@map("classes")
}

model Courses {
  id           String         @id @default(uuid())
  courseCode   String         @unique
  name         String
  credit       Int            @default(3)
  totalMarks   Int            @default(100)
  classId      String
  class        Class          @relation(fields: [classId], references: [classId], onDelete: Cascade)
  enrollCourse EnrollCourse[]
  createdAt    DateTime       @default(now())
}

model EnrollClass {
  id        String   @id @default(uuid())
  year      String
  uId    String   @unique
  classId   String
  user      User     @relation(fields: [uId], references: [uId], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [classId], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([year, uId])
}

model EnrollCourse {
  id        Int      @id @default(autoincrement())
  year      String
  courseId  String
  uId    String
  courses   Courses  @relation(fields: [courseId], references: [courseCode], onDelete: Cascade)
  user      User     @relation(fields: [uId], references: [uId], onDelete: Cascade)
  exams     Exam[]
  results   Result[]
  createdAt DateTime @default(now())

  @@unique([uId, year])
}

enum ExamType {
  MidTerm
  Final
  Assignment
}

model Exam {
  id       String       @id @default(uuid())
  courseId Int
  course   EnrollCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  result   Result[]
  type     ExamType     @default(Final)
  year     String

  @@unique([year, courseId, type])
}

model Result {
  id        String       @id @default(uuid())
  courseId  Int
  uId    String
  examId    String
  exam      Exam         @relation(fields: [examId], references: [id], onDelete: Cascade)
  course    EnrollCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [uId], references: [uId], onDelete: Cascade)
  marks     Float        @default(33.0)
  grade     String?      @default("A+") // A+ A- B+ B- C+ C- D+ D- F
  createdAt DateTime     @default(now())

  @@unique([uId, courseId, examId])
}

model Attendence {
  id        String  @id @default(uuid())
  uId    String
  user      User    @relation(fields: [uId], references: [uId], onDelete: Cascade)
  studentId String
  status    Boolean @default(false)
  date      String
}

model Issues {
  id        String   @id @default(uuid())
  type      String
  details   String   @db.LongText
  createdAt DateTime @default(now())
}

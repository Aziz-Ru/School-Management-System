generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// env("DATABASE_URL")
model school {
  id          String @id @unique
  name        String
  email       String @unique
  phone       String @unique
  address     String @db.LongText
  establishAt String
}

model teachers {
  id            String              @id @default(uuid()) //Teacher ID
  email         String
  name          String // Teacher name
  password      String // Teacher Password
  imageLink     String?
  qualification String? //Teacher Qualification
  rank          String
  bio           String? //Teacher Bio
  dob           String
  sex           String //Teacher date of birth
  address       String? // Teacher Address
  phone         String              @db.VarChar(11)
  activeStatus  Boolean
  salary        Float               @default(20000.0)
  attendence    teacherAttendence[]

  createdAt DateTime @default(now())
}

model students {
  id            String              @id @default(uuid())
  roll          String              @unique
  name          String
  email         String
  password      String
  dob           String
  sex           String
  address       String
  imageLink     String
  phone         String              @db.Char(11)
  enrollClass   enrollClasses       @relation(fields: [enrollClassId], references: [id])
  enrollClassId String
  result        results[]
  attendence    studentAttendence[]
  createdAt     DateTime            @default(now())
}

// first create class
model classes {
  classId       String          @id
  name          String          @unique
  courses       courses[]
  enrolledClass enrollClasses[]
  monthlyFee    Float           @default(2000.0)
  totalStudents Int             @default(0)
  totalTeachers Int             @default(0)
  totalCourses  Int             @default(0)
  createdAt     DateTime        @default(now())
}

model enrollClasses {
  id          String     @id @default(uuid())
  students    students[]
  classroom   classes    @relation(fields: [classRoomId], references: [classId])
  classRoomId String
  year        String
  createdAt   DateTime   @default(now())
}

model courses {
  id          String    @id
  name        String
  credit      Int       @default(3)
  totalMarks  Int       @default(100)
  class       classes   @relation(fields: [classroomId], references: [classId])
  classroomId String
  result      results[]
  exam        exams[]
}

model studentAttendence {
  id        String   @id @default(uuid())
  student   students @relation(fields: [studentId], references: [id])
  studentId String
  status    Boolean  @default(false)
  date      String
}

model teacherAttendence {
  id        String   @id @default(uuid())
  teacher   teachers @relation(fields: [teacherId], references: [id])
  teacherId String
  status    Boolean  @default(false)
  date      String
}

model exams {
  id          String    @id @default(uuid())
  description String    @db.Text
  name        String
  date        DateTime
  result      results[]
  course      courses   @relation(fields: [courseId], references: [id])
  courseId    String
}

model results {
  id        String   @id @default(uuid())
  exam      exams    @relation(fields: [examId], references: [id])
  examId    String
  course    courses  @relation(fields: [courseId], references: [id])
  courseId  String
  student   students @relation(fields: [studentId], references: [id])
  studentId String
  marks     Float    @default(33.0)
  grade     String?
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model issues {
  id      String @id @default(uuid())
  type    String
  details String @db.LongText

  createdAt DateTime @default(now())
}

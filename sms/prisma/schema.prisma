generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id       String @id 
  password String 
}

model School {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  phone      String  @unique
  address    String
  message    String?
  schoolCode String
  EIIN       String
  imageURL   String?
}

model Teacher {
  id         String     @id @unique
  password   String
  fullName   String
  email      String
  phone      String
  sex        UserSex  @default(MALE)
  address    String
  message    String ?
  img        String ?
  deptId     String ?
  deptName    Department? @relation(fields: [deptId],references: [id],onDelete: Cascade)
  super String?
  sections Section[]
  rank       Rank      @default(Assistant)
  level       Level @default(SCHOOL)
  lesson    Lesson[]
  createdAt  DateTime   @default(now())
  
}

model Student {
  id        String   @id @unique
  password  String
  fullName  String
  phone     String ?
  email     String ?
  dob       String
  img       String ?
  sex       UserSex @default(MALE)
  sectionId String 
  section   Section @relation(fields: [sectionId],references: [id])
  createdAt DateTime @default(now())
  
}



model Class {
  id        Int    @id 
  className String
  level     Level @default(PRIMARY)
  sections  Section[]
  course    Course[]
  
}


model Section {
  id          String    @id @default(cuid())
  sectionName String    
  year        Int
  supervisorId String  ?
  students    Student[]
  lesson      Lesson[]
  classId     Int
  supervisor  Teacher ? @relation(fields: [supervisorId],references: [id],onDelete: Cascade)
  classTable  Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  @@unique([sectionName, classId,year])
}


model Faculty {
  id          String       @id @default(cuid())
  facultyName String       @unique
  departments  Department[]
}

model Department {
  id        String     @id @default(cuid())
  deptName  String     @unique
  facultyId String
  faculty   Faculty    @relation(fields: [facultyId], references: [id])
  teachers  Teacher[]
  courses   Course[]
}

model Course {
  id         String     @id  @default(cuid())
  courseName String     @unique   
  classId    Int
  deptId     String ?
  class  Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  department Department ? @relation(fields: [deptId],references: [id],onDelete: Cascade)
  lesson     Lesson []
  createdAt  DateTime   @default(now())
  @@unique([courseName, classId])
}

model Lesson {
  id      String   @id @default(cuid())
  day     Day @default(SUNDAY)
  startTime String
  endTime   String
  sectionId  String
  section    Section @relation(fields: [sectionId],references: [id])
  courseId  String
  course    Course @relation(fields: [courseId],references: [id])
  teacherId  String
  teacher    Teacher @relation(fields: [teacherId],references: [id])
  
}


model StakeHolder {
  id        String  @id @default(cuid())
  fullName String
  phone     String
  message   String ?
  rank      String
  imageURL  String
}


model events{
  id        String   @id @default(cuid())
  title     String
  content   String
  date      String
  createdAt DateTime @default(now())
}

model annoucement {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      String
  createdAt DateTime @default(now())
}






enum Rank{
  Senior
  Assistant
}

enum Level{
  PRIMARY
  SCHOOL
  COLLEGE
}
enum Day{
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}



enum UserSex{
  MALE
  FEMALE
}







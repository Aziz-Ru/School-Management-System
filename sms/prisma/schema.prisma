generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Acdemic Building
model Room {
  id              String  @id @default(uuid())
  roomNumber      Int    
  floor           Int
  building        String
  capacity        Int
  type            RoomType  @default(CLASSROOM)
  isActive        Boolean   @default(true)
  
  @@unique([roomNumber, floor, building])
  
}


// teacher subjects
model subject{
  subject_name  String @unique @id
  subject_code   Int
  teacher       teacher[]
  class_subject  class_subject[]
  
}

//classes 1-10
model classes{
  class_id  Int @unique @id
  class_name String
  description String @db.Text
  level      Level   
  sections sections[]
  subjects  class_subject[]
}
//class subject
model class_subject{
  subject_name    String    
  class_id      Int
  description   String @db.Text
  class         classes  @relation(fields: [class_id],references: [class_id],onDelete: Cascade)
  subject       subject @relation(fields: [subject_name],references: [subject_name],onDelete: Cascade)
  section_subjects    section_subject[]
  @@id([subject_name,class_id])
  @@unique([subject_name,class_id])
}

// section of each class
model sections{
  section_id String @id @default(uuid())
  section_name String
  class_id    Int 
  academic_year Int 
  room_number  Int
  class_teacher  Int
  index      Int @default(0)
  teacher    teacher @relation(fields: [class_teacher],references: [teacher_id],onDelete: Cascade)
  class      classes@relation(fields: [class_id],references: [class_id],onDelete: Cascade)
  students   student[]
  exams      exam[]
  section_subjects  section_subject[]
  attendance    student_attendance[]
  maximum_student Int @default(50)
  createdAt    DateTime @default(now())
  @@unique([section_name,class_id,academic_year])
  @@unique([room_number,academic_year])
  @@unique([class_teacher,academic_year])
}

// section subject of the class
model section_subject {
class_id      Int
subject_name     String 
section_id     String 
teacher_id     Int
class_subjects class_subject @relation(fields: [subject_name,class_id],references: [subject_name,class_id],onDelete: Cascade)
section        sections @relation(fields: [section_id],references: [section_id] ,onDelete: Cascade)
teachers       teacher @relation(fields: [teacher_id],references: [teacher_id] ,onDelete: Cascade)
schedules      section_subject_schedule[]
exams          exam_subjects[]
subject_marks   subject_marks[]
@@id([subject_name,section_id])

}

model section_subject_schedule{
  schedule_id    String @id @default(uuid())
  subject_name     String
  section_id     String
  subject        section_subject @relation(fields: [subject_name,section_id],references: [subject_name,section_id],onDelete: Cascade)
  timeslot_id       String
  timeslots      timeslot @relation(fields: [timeslot_id],references: [id],onDelete: Cascade)
  createdAt       DateTime @default(now())
  @@unique([subject_name,section_id,timeslot_id])
}

model timeslot{
  id    String @id @default(uuid())
  schedule  section_subject_schedule[]
  start_time         String
  end_time           String //HH:MM
  day            DayOfWeek
  type           PeriodType @default(REGULAR)
  
}

model user{
    id            Int    @id @unique @default(autoincrement())
    email         String    @unique
    password      String
    role          UserRole
    sex            GENDER 
    status        UserStatus @default(ACTIVE)
    img           String?
    lastLogin     DateTime?
    teacherProfile teacher?
    studentProfile student?
    phone           String
    address         String
    student_attendance_mark   student_attendance[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}


model teacher {
  first_name    String
  last_name     String
  abbreviation  String
  teacher_id      Int @unique
  teacher        user @relation(fields: [teacher_id],references: [id],onDelete: Cascade)
  subject_name      String
  subject        subject @relation(fields: [subject_name],references: [subject_name],onDelete: Cascade)
  degrees        Degree @default(BBA)
  class_teacher  sections[]
  rank            Rank 
  level            Level
  leaves         TeacherLeave[]
  attendance     TeacherAttendance[]
  enrolled_subjects  section_subject[]
  salary         Int @default(25000)
  @@id([teacher_id,subject_name])
}

 model student{
first_name    String
last_name     String
student_id Int @unique @id
student_id_str  String
student     user @relation(fields: [student_id],references: [id],onDelete: Cascade)
section_id   String
dob          DateTime
level        Level
section     sections @relation(fields: [section_id],references: [section_id],onDelete: Cascade)
attendance   student_attendance[]
exam_result   exam_result[]
subject_marks  subject_marks[]
attendance_summery   attendance_summery[]

}

model TeacherLeave {
  id          String   @id @default(cuid())
  teacher_id   Int
  teacher     teacher  @relation(fields: [teacher_id], references: [teacher_id],onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  type        LeaveType
  status      LeaveStatus @default(PENDING)
  reason      String @db.Text
}


model student_attendance {
  id              String            @id @unique @default(cuid())
  student_id       Int
  student         student          @relation(fields: [student_id], references: [student_id],onDelete: Cascade)
  sectionId       String
  section         sections          @relation(fields: [sectionId], references: [section_id],onDelete: Cascade)
  date            DateTime
  status          AttendanceStatus
  timeIn          DateTime?
  timeOut         DateTime?
  lateMinutes     Int?            // If late, how many minutes
  markedById      Int          // Teacher/Staff who marked attendance
  markedBy        user            @relation(fields: [markedById], references: [id],onDelete: Cascade)
  remarks         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([student_id, date])
  @@index([date, status])
  @@index([student_id, status])
}

model TeacherAttendance {
  id              String           @id @default(cuid())
  teacherId       Int
  teacher         teacher          @relation(fields: [teacherId], references: [teacher_id],onDelete: Cascade)
  date            DateTime
  status          AttendanceStatus
  timeIn          DateTime?
  timeOut         DateTime?
  lateMinutes     Int?
  substitutedBy   Int?            // If another teacher covered
  
  remarks         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([teacherId, date])
  @@index([date, status])
}

model attendance_summery {

  id              String    @id @default(cuid())
  student_id       Int
  student         student   @relation(fields: [student_id], references: [student_id],onDelete: Cascade)
  academicYear    Int
  month           Int
  totalDays       Int
  presentDays     Int
  absentDays      Int
  lateDays        Int
  excusedDays     Int
  leavesDays      Int
  attendancePercentage Float
  lastCalculated  DateTime
  
  @@unique([student_id, academicYear, month])
}

model AttendancePolicy {
  id                    String    @id @default(cuid())
  academicYear          Int
  requiredAttendance    Float     // Percentage required
  lateGracePeriod      Int       // Minutes
  autoMarkAbsentAfter   Int       // Minutes
  countLateAsHalfDay    Int       // Number of lates to count as half day
  countLateAsAbsent     Int       // Number of lates to count as absent
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}



//exam
model exam {
  id String  @id @default(uuid())
  type EXAM_TYPE
  section_id   String
  section      sections @relation( fields: [section_id],references: [section_id],onDelete: Cascade)
  start_date   DateTime
  end_date     DateTime
  exam_results  exam_result[]
  exam_subjects  exam_subjects[]
  publish_status  PublishStatus @default(DRAFT)
}

// exam subject 
model exam_subjects{
  id            String    @id @default(uuid())
  exam_id       String
  exam           exam @relation(fields: [exam_id],references: [id],onDelete: Cascade)
  subject_name    String
  section_id     String
  subject       section_subject @relation(fields: [subject_name,section_id],references: [subject_name,section_id],onDelete: Cascade) 
  max_mark      Float
  passing_mark  Float
  weigtage      Float
  subject_marks  subject_marks[]
}

//  subject mark of student 
model subject_marks{
  id String  @id @default(uuid())
  exam_subject_id   String
  exam_subject     exam_subjects @relation(fields: [exam_subject_id],references: [id],onDelete: Cascade)
  student_id        Int
  student           student @relation(fields: [student_id],references: [student_id],onDelete: Cascade)
  subject_name  String
  section_id    String
  section_subject  section_subject @relation(fields: [section_id,subject_name],references: [section_id,subject_name],onDelete: Cascade)
  obtained_marks  Float
  percentage Float
  grade String
  practical_marks  Float?
  theory_mark  Float?
  assignment_mark Float?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

}


//overall exam result  of each student
model exam_result {
  id            String    @id @default(cuid())
  examId        String
  exam          exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  student_id     Int
  student       student   @relation(fields: [student_id], references: [student_id],onDelete: Cascade)
  totalObtainedMarks Float
  percentage    Float
  gradeId       String
  grade         String    
  rank          Int?      // Class rank
  remarks       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // @@unique([examId, studentId])
}


model Notice {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  type          NoticeType
  targetAudience AudienceType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startDate     DateTime  // When the notice becomes active
  endDate       DateTime? // Optional end date for time-sensitive notices

  @@index([startDate, endDate])
  @@index([type, targetAudience])
}

enum Level {
  PRIMARY
  SECONDARY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  EXCUSED
  ON_LEAVE
}

// Enum for notice types (e.g., general announcements, events, assignments, etc.)
enum NoticeType {
  ANNOUNCEMENT
  EVENT
  ASSIGNMENT
  ALERT
}

// Enum to define the target audience for the notice
enum AudienceType {
  ALL            // Notice for the whole school
  STAFF          // Notice for all staff members
  STUDENTS       // Notice for all students
  PARENTS        // Notice for all parents
  SECTION        // Notice for a specific section
}

enum GENDER {
  MALE
  FEMALE
}


enum RoomType {
  CLASSROOM
  LABORATORY
  LIBRARY
  COMPUTER_LAB
  MUSIC_ROOM
  ART_ROOM
  GYMNASIUM
  AUDITORIUM
}

enum DayOfWeek {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum PeriodType {
  REGULAR
  LAB
  ACTIVITY
  BREAK
  ASSEMBLY
}

enum Degree {
  BSC
  MSC
  BBA
}

enum EXAM_TYPE {
  MIDTERM
  FINAL
  QUIZ
  ASSIGNMENT
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}



enum LeaveType {
  SICK_LEAVE
  FAMILY_EMERGENCY
  PLANNED_ABSENCE
  SPORTS_ACTIVITY
  ACADEMIC_ACTIVITY
  OTHER
}



enum LeaveStatus {
  PENDING      // Initial state when leave is requested
  APPROVED     // Leave approved by authority
  REJECTED     // Leave request denied
  CANCELLED    // Leave cancelled by teacher
  PARTIALLY_APPROVED  // Approved with modified dates
  ON_HOLD     // Need more information/documentation
  IN_PROGRESS  // Currently on leave
  COMPLETED    // Leave period completed
  EXPIRED      // Approved but not taken
}

enum UserRole {
    ADMIN
    TEACHER
    STUDENT
    STAFF
  }

  enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
  }

enum Rank {
  SENIOR
  ASSISTANT
}
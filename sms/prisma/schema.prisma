generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id       String @id
  password String
}

model school {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  phone      String  @unique
  address    String
  message    String?
  schoolCode String
  EIIN       String
  imageURL   String?
}


model teacher {
  id             Int              @id @unique
  password       String
  fullName       String
  email          String
  phone          String
  address        String
  message        String?
  img            String?
  courses        course[]
  sectionSuper   String?
  section        section[]
  schedule       schedule[]
  attendence     teacherAttendence[]
  sex            GENDER           @default(MALE)
  rank           RANK             @default(ASSISTANT)
  level          LEVEL            @default(SCHOOL)
  createdAt      DateTime         @default(now())
}

model student {
  id             Int          @id @unique
  password       String
  fullName       String
  phone          String
  address        String
  dob            String
  lastExamStatus Boolean @default(false)
  img            String?
  result         result[]
  sex            GENDER       @default(MALE)
  sectionId      String
  section        section      @relation(fields: [sectionId], references: [id])
  attendenceList attendence[]
  createdAt      DateTime     @default(now())
}


model Class {
  id        Int       @id
  className String
  level     LEVEL     @default(PRIMARY)
  sections  section[]
  course    subject[]
}

model course {
  courseName String    @id @unique
  mark       Int       @default(100)
  subject    subject[]
  teachers   teacher[]
  createdAt  DateTime  @default(now())
}

model subject {
  id         String           @id @default(uuid())
  classId    Int
  courseName String
  course     course           @relation(fields: [courseName], references: [courseName], onDelete: Cascade)
  class      Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  syllabus   String?
  exams      examCourse[]
  schedules schedule[]
  @@unique([courseName, classId])
}

model section {
  id               String           @id @default(uuid())
  sectionName      String
  classId          Int
  index            Int              @default(1)
  year             Int
  sectionTeacherId Int?
  students         student[]
  attendence       attendence[]
  schedule          schedule[]
  exam             exam[]
  sectionTeacher   teacher?         @relation(fields: [sectionTeacherId], references: [id], onDelete: Cascade)
  classTable       Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  @@unique([sectionName, classId, year])
}



model exam {
  id          String        @id @default(uuid())
  type         EXAM_TYPE    @default(FINAL)
  sectionId   String        
  section     section       @relation(fields: [sectionId], references: [id])
  examSubject examCourse[]
  createdAt   DateTime      @default(now())
  @@unique([type,sectionId])
}

model examCourse{
  id        String @id @default(uuid())
  examId    String
  subjectId  String
  date       DateTime
  result     result[]
  exam      exam   @relation(fields: [examId], references: [id])
  subject    subject @relation(fields: [subjectId], references: [id])
  
}

model result {
  id        String      @id @default(uuid())
  studentId Int
  examId    String
  mark      Int
  grade     String
  student   student     @relation(fields: [studentId], references: [id])
  exam      examCourse        @relation(fields: [examId], references: [id])
  createdAt DateTime    @default(now())
}

model schedule {
  id        String         @id @default(uuid())
  startEnd String
  sectionId String
  teacherId Int
  subjectId  String
  day       DAY
  section   section        @relation(fields: [sectionId], references: [id])
  subject   subject @relation(fields: [subjectId], references: [id])
  teacher   teacher        @relation(fields: [teacherId], references: [id])
  @@unique([teacherId,startEnd,day,sectionId])
}

model authority {
  id       String  @id @default(uuid())
  fullName String
  phone    String
  message  message[]
  rank     String
  imageURL String
}

model message{
  id     String  @id
  title  String
  message  String
  authorId   String
  author     authority @relation(fields: [authorId],references: [id])
  createdAt DateTime
}

model notice {
  id        String   @id @default(uuid())
  title     String
  content   String @db.Text
  createdAt DateTime @default(now())
}

model attendence {
  id        String   @id @default(uuid())
  year      Int   @default(2024)
  month     Int
  studentId Int
  present   Boolean  @default(false)
  sectionId String
  section   section  @relation(fields: [sectionId], references: [id])
  student   student  @relation(fields: [studentId], references: [id])
  date      DateTime
  @@unique([studentId,date,month])
}

model teacherAttendence {
  id        String  @id @default(uuid())
  year      Int   @default(2024)
  month     Int
  teacherId Int
  present   Boolean @default(false)
  date      DateTime
  teacher   teacher @relation(fields: [teacherId], references: [id])
   @@unique([teacherId,date,month])
}

enum RANK {
  SENIOR
  ASSISTANT
}

enum LEVEL {
  PRIMARY
  SCHOOL
  COLLEGE
}
enum EXAM_TYPE{
  MID
  FINAL
}

enum DAY {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}

enum MONTH {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}
enum GENDER {
  MALE
  FEMALE
}
